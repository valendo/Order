<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExcelExporter</name>
    </assembly>
    <members>
        <member name="T:ExcelExporter.Exporters.SheetBase`1">
            <summary>A reusable base class that exports data provided by a derived class to an excel spreadsheet.</summary>
            <typeparam name="TRow">The type of the objects used by the implementation to represent each row.</typeparam>
        </member>
        <member name="T:ExcelExporter.IExcelSheet">
            <summary>Stores a single exportable worksheet.</summary>
        </member>
        <member name="M:ExcelExporter.IExcelSheet.Export(System.Data.OleDb.OleDbConnection)">
            <summary>Exports the worksheet to the specified OleDb connection.</summary>
        </member>
        <member name="P:ExcelExporter.IExcelSheet.Name">
            <summary>Gets the name of the worksheet.</summary>
        </member>
        <member name="M:ExcelExporter.Exporters.SheetBase`1.#ctor(System.String)">
            <summary>Creates a SheetBase instance.</summary>
        </member>
        <member name="M:ExcelExporter.Exporters.SheetBase`1.GetColumns">
            <summary>Gets the columns to put in the sheet.</summary>
        </member>
        <member name="M:ExcelExporter.Exporters.SheetBase`1.GetRows">
            <summary>Gets a collection of objects containing the data to show in each row.</summary>
        </member>
        <member name="M:ExcelExporter.Exporters.SheetBase`1.GetValues(`0)">
            <summary>Gets the column values for a specific row object.  (in the order returned by GetColumns())</summary>
        </member>
        <member name="M:ExcelExporter.Exporters.SheetBase`1.Export(System.Data.OleDb.OleDbConnection)">
            <summary>Exports this sheet to an open OleDb connection.</summary>
        </member>
        <member name="P:ExcelExporter.Exporters.SheetBase`1.Name">
            <summary>Gets the name of the exported worksheet.</summary>
        </member>
        <member name="M:ExcelExporter.DbExtensions.CreateCommand(System.Data.IDbConnection,System.String)">
            <summary>Creates a DbCommand.</summary>
            <param name="connection">The connection to create the command for.</param>
            <param name="sql">The SQL of the command.</param>
        </member>
        <member name="M:ExcelExporter.DbExtensions.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>Executes a SQL statement against a connection.</summary>
            <param name="connection">The connection to the database.  The connection is not closed.</param>
            <param name="sql">The SQL to execute.</param>
            <returns>The number of rows affected by the statement.</returns>
        </member>
        <member name="T:ExcelExporter.ExcelExport">
            <summary>Exports a collection of tables to an Excel spreadsheet.</summary>
        </member>
        <member name="M:ExcelExporter.ExcelExport.#ctor">
            <summary>Creates a new ExcelExport instance.</summary>
        </member>
        <member name="M:ExcelExporter.ExcelExport.AddSheet``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds a collection of strongly-typed objects to be exported.</summary>
            <param sheetName="sheetName">The name of the sheet to generate.</param>
            <param sheetName="items">The rows to export to the sheet.</param>
            <returns>This instance, to allow chaining.kds</returns>
        </member>
        <member name="M:ExcelExporter.ExcelExport.AddSheet(System.Data.DataTable)">
            <summary>Adds the contents of a DataTable instance to be exported, using the table's name as the worksheet name.</summary>
        </member>
        <member name="M:ExcelExporter.ExcelExport.AddSheet(System.String,System.Data.DataTable)">
            <summary>Adds the contents of a DataTable instance to be exported.</summary>
        </member>
        <member name="M:ExcelExporter.ExcelExport.AddSheet(System.String,System.Data.IDataReader)">
            <summary>Adds the contents returned by an open DataReader to be exported.</summary>
            <param sheetName="sheetName">The name of the sheet to generate.</param>
            <pparam name="reader">The reader to read rows from.  This reader must remain open when ExportTo() is called, and will be closed automatically during the export.</pparam>
        </member>
        <member name="M:ExcelExporter.ExcelExport.ExportTo(System.String)">
            <summary>Exports all of the added sheets to an Excel file.</summary>
            <param sheetName="fileName">The filename to export to.  The file type is inferred from the extension.</param>
        </member>
        <member name="M:ExcelExporter.ExcelExport.ExportTo(System.String,ExcelExporter.ExcelFormat)">
            <summary>Exports all of the added sheets to an Excel file.</summary>
        </member>
        <member name="M:ExcelExporter.ExcelExport.GetDBType(System.String)">
            <summary>Gets the database format that uses the given extension.</summary>
        </member>
        <member name="M:ExcelExporter.ExcelExport.GetExtension(ExcelExporter.ExcelFormat)">
            <summary>Gets the file extension for a database format.</summary>
        </member>
        <member name="P:ExcelExporter.ExcelExport.Sheets">
            <summary>Gets the sheets which will be exported by this instance.</summary>
        </member>
        <member name="T:ExcelExporter.ExcelFormat">
            <summary>A format for a database file.</summary>
        </member>
        <member name="F:ExcelExporter.ExcelFormat.Excel2003">
            <summary>An Excel 97-2003 .xls file.</summary>
        </member>
        <member name="F:ExcelExporter.ExcelFormat.Excel2007">
            <summary>An Excel 2007 .xlsx file.</summary>
        </member>
        <member name="F:ExcelExporter.ExcelFormat.Excel2007Binary">
            <summary>An Excel 2007 .xlsb binary file.</summary>
        </member>
        <member name="F:ExcelExporter.ExcelFormat.Excel2007Macro">
            <summary>An Excel 2007 .xlsm file with macros.</summary>
        </member>
        <member name="T:ExcelExporter.Exporters.ColumnInfo">
            <summary>Stores information about a column in an exported sheet.</summary>
        </member>
        <member name="M:ExcelExporter.Exporters.ColumnInfo.#ctor(System.String,System.Type)">
            <summary>Creates a new ColumnInfo instance.</summary>
        </member>
        <member name="P:ExcelExporter.Exporters.ColumnInfo.Name">
            <summary>Gets the name of the column as displayed in the column header.</summary>
        </member>
        <member name="P:ExcelExporter.Exporters.ColumnInfo.DataType">
            <summary>Gets the type of the column.</summary>
        </member>
    </members>
</doc>
